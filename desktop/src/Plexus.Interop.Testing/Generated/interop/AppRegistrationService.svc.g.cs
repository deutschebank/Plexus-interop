/**
 * Copyright 2017-2022 Plexus Interop Deutsche Bank AG
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// <auto-generated>
// 	Generated by the Plexus Interop compiler.  DO NOT EDIT!
// 	source: interop\app_registration_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code
namespace Plexus.Interop.Testing.Generated {
	
	using System;
	using global::Plexus;
	using global::Plexus.Channels;
	using global::Plexus.Interop;
	using global::System.Threading.Tasks;
					
	public static partial class AppRegistrationService {
		
		public const string Id = "interop.AppRegistrationService";			
		public const string RequestInstanceIdMethodId = "RequestInstanceId";
		public const string RegisterInstanceIdMethodId = "RegisterInstanceId";
		
		public static readonly AppRegistrationService.Descriptor DefaultDescriptor = CreateDescriptor();
		
		public static AppRegistrationService.Descriptor CreateDescriptor() {
			return new AppRegistrationService.Descriptor();
		} 
		
		public static AppRegistrationService.Descriptor CreateDescriptor(string alias) {
			return new AppRegistrationService.Descriptor(alias);
		}				
	
		public partial interface IRequestInstanceIdProxy {
			IUnaryMethodCall<global::Plexus.Interop.Testing.Generated.UniqueId> RequestInstanceId(global::Plexus.Interop.Testing.Generated.RequestInstanceIdRequest request);
		}
		
		public partial interface IRegisterInstanceIdProxy {
			IUnaryMethodCall<global::Plexus.Interop.Testing.Generated.RegisterInstanceIdResponse> RegisterInstanceId(global::Plexus.Interop.Testing.Generated.RegisterInstanceIdRequest request);
		}
		
		public partial interface IRequestInstanceIdImpl {
			Task<global::Plexus.Interop.Testing.Generated.UniqueId> RequestInstanceId(global::Plexus.Interop.Testing.Generated.RequestInstanceIdRequest request, MethodCallContext context);
		}
		
		public partial interface IRegisterInstanceIdImpl {
			Task<global::Plexus.Interop.Testing.Generated.RegisterInstanceIdResponse> RegisterInstanceId(global::Plexus.Interop.Testing.Generated.RegisterInstanceIdRequest request, MethodCallContext context);
		}
		
		public sealed partial class Descriptor {
		
			public UnaryMethod<global::Plexus.Interop.Testing.Generated.RequestInstanceIdRequest, global::Plexus.Interop.Testing.Generated.UniqueId> RequestInstanceIdMethod {get; private set; }
			public UnaryMethod<global::Plexus.Interop.Testing.Generated.RegisterInstanceIdRequest, global::Plexus.Interop.Testing.Generated.RegisterInstanceIdResponse> RegisterInstanceIdMethod {get; private set; }
			
			public Descriptor() {				
				RequestInstanceIdMethod = Method.Unary<global::Plexus.Interop.Testing.Generated.RequestInstanceIdRequest, global::Plexus.Interop.Testing.Generated.UniqueId>(Id, RequestInstanceIdMethodId);
				RegisterInstanceIdMethod = Method.Unary<global::Plexus.Interop.Testing.Generated.RegisterInstanceIdRequest, global::Plexus.Interop.Testing.Generated.RegisterInstanceIdResponse>(Id, RegisterInstanceIdMethodId);
			}
		
			public Descriptor(string alias) {
				RequestInstanceIdMethod = Method.Unary<global::Plexus.Interop.Testing.Generated.RequestInstanceIdRequest, global::Plexus.Interop.Testing.Generated.UniqueId>(Id, alias, RequestInstanceIdMethodId);
				RegisterInstanceIdMethod = Method.Unary<global::Plexus.Interop.Testing.Generated.RegisterInstanceIdRequest, global::Plexus.Interop.Testing.Generated.RegisterInstanceIdResponse>(Id, alias, RegisterInstanceIdMethodId);
			}
		}
	}
					
}
#endregion Designer generated code
