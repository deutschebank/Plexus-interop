//
// Copyright 2017-2022 Plexus Interop Deutsche Bank AG
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package interop;

import "interop/unique_id.proto";
import "interop/app_launch_mode.proto";
import "interop/app_connection_descriptor.proto";
import "interop/invocation_descriptor.proto";
import "google/protobuf/empty.proto";

service AppLifecycleService {
	rpc ResolveApp (ResolveAppRequest) returns (ResolveAppResponse);
	rpc GetLifecycleEventStream (google.protobuf.Empty) returns (stream AppLifecycleEvent);
	rpc GetInvocationEventStream (google.protobuf.Empty) returns (stream InvocationEvent);
	rpc GetConnections (GetConnectionsRequest) returns (GetConnectionsResponse);
	rpc GetConnectionsStream (GetConnectionsRequest) returns (stream GetConnectionsEvent);
}

message ResolveAppRequest {
	string app_id = 1;
	AppLaunchMode app_resolve_mode = 2;
}

message ResolveAppResponse {
	UniqueId app_instance_id = 1;
	UniqueId app_connection_id = 2;
	bool is_new_instance_launched = 3;
}

message AppLifecycleEvent {	
	oneof event {
		AppConnectedEvent connected = 1;
		AppDisconnectedEvent disconnected = 2;
		AppConnectionErrorEvent error = 3;
	}
}

message InvocationEvent {
	oneof event {
		InvocationStartedEvent invocation_started = 1;
		InvocationFinishedEvent invocation_finished = 2;
	}
}

message AppConnectedEvent {
	AppConnectionDescriptor connection_descriptor = 1;
}

message AppDisconnectedEvent {
	AppConnectionDescriptor connection_descriptor = 1;	
}

message AppConnectionErrorEvent {
	AppConnectionDescriptor connection_descriptor = 1;
}

message InvocationStartedEvent {	
	InvocationDescriptor invocation_descriptor = 1;
}

message InvocationFinishedEvent {
	InvocationDescriptor invocation_descriptor = 1;
	InvocationResult result = 2;
	int64 duration_ms = 3;
}

enum InvocationResult {
	Succeeded = 0;
	Canceled = 1;
	Failed = 2;
}

message GetConnectionsRequest {
	string application_id = 1;
	UniqueId app_instance_id = 2;
	UniqueId connection_id = 3;
}

message GetConnectionsResponse {
	repeated AppConnectionDescriptor connections = 1;
}

message GetConnectionsEvent {
	repeated AppConnectionDescriptor connections = 1;
	oneof event {
		AppConnectionDescriptor new_connection = 2;
		AppConnectionDescriptor closed_connection = 3;
	}
}