import { MethodInvocationContext, Completion, ClientConnectRequest, StreamingInvocationClient, GenericClientApi, InvocationRequestInfo, InvocationClient, GenericRequest, GenericClientApiBase } from "@plexus-interop/client";
import { ProvidedMethodReference, ServiceDiscoveryRequest, ServiceDiscoveryResponse, MethodDiscoveryRequest, MethodDiscoveryResponse, GenericClientApiBuilder, ValueHandler } from "@plexus-interop/client";
import { TransportConnection, UniqueId } from "@plexus-interop/transport-common";
import { Arrays, Observer } from "@plexus-interop/common";
import { InvocationObserver, InvocationObserverConverter, ContainerAwareClientAPIBuilder } from "@plexus-interop/client";

import * as plexus from "./plexus-messages";

/**
 *  Internal Proxy implementation for ExampleService service
 */
export class ExampleServiceProxy {

    constructor(genericClient) {
        this.genericClient = genericClient;
    }

    pointToPoint(request) {
        const requestToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Request.encode(from).finish());
        const responseFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Response.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Response.toObject(decoded);
        };
        const invocationInfo = {
            methodId: "PointToPoint",
            serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
        };
        return new Promise((resolve, reject) => {
            this.genericClient.sendRawUnaryRequest(invocationInfo, requestToBinaryConverter(request), {
                value: responsePayload => {
                    resolve(responseFromBinaryConverter(responsePayload));
                },
                error: (e) => {
                    reject(e);
                }
            });
        });
    }
    
    serverStreaming(request, responseObserver) {
        const requestToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Request.encode(from).finish());
        const responseFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Response.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Response.toObject(decoded);
        };
        const invocationInfo = {
            methodId: "ServerStreaming",
            serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
        };
        return this.genericClient.sendRawServerStreamingRequest(
            invocationInfo,
            requestToBinaryConverter(request),
            new InvocationObserverConverter(responseObserver, responseFromBinaryConverter));
    }
    
    clientToServer(responseObserver) {
        const requestToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Request.encode(from).finish());
        const responseFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Response.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Response.toObject(decoded);
        };
        const invocationInfo = {
            methodId: "ClientToServer",
            serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
        };
        return this.genericClient.sendRawBidirectionalStreamingRequest(
            invocationInfo,
            new InvocationObserverConverter(responseObserver, responseFromBinaryConverter))
            .then(baseClient =>  {
                return {
                    next: (request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest) => baseClient.next(requestToBinaryConverter(request)),
                    error: baseClient.error.bind(baseClient),
                    complete: baseClient.complete.bind(baseClient),
                    cancel: baseClient.cancel.bind(baseClient)
                };
            });
    }
    
    bidiStreaming(responseObserver) {
        const requestToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Request.encode(from).finish());
        const responseFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Response.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Response.toObject(decoded);
        };
        const invocationInfo = {
            methodId: "BidiStreaming",
            serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
        };
        return this.genericClient.sendRawBidirectionalStreamingRequest(
            invocationInfo,
            new InvocationObserverConverter(responseObserver, responseFromBinaryConverter))
            .then(baseClient =>  {
                return {
                    next: (request: plexus.com.db.plexus.interop.dsl.gen.test.model.IRequest) => baseClient.next(requestToBinaryConverter(request)),
                    error: baseClient.error.bind(baseClient),
                    complete: baseClient.complete.bind(baseClient),
                    cancel: baseClient.cancel.bind(baseClient)
                };
            });
    }

}

/**
 *  Internal Proxy implementation for NoLaunchExampleService service
 */
export class NoLaunchExampleServiceProxy {

    constructor(genericClient) {
        this.genericClient = genericClient;
    }

    pointToPoint(request) {
        const requestToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Request.encode(from).finish());
        const responseFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Response.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Response.toObject(decoded);
        };
        const invocationInfo = {
            methodId: "PointToPoint",
            serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService",
            serviceAlias: "NoLaunchExampleService"
        };
        return new Promise((resolve, reject) => {
            this.genericClient.sendRawUnaryRequest(invocationInfo, requestToBinaryConverter(request), {
                value: responsePayload => {
                    resolve(responseFromBinaryConverter(responsePayload));
                },
                error: (e) => {
                    reject(e);
                }
            });
        });
    }

}

/**
 * Client's API internal implementation
 *
 */
class ComponentAClient extends GenericClientApiBase {

    constructor(
        genericClient,
        exampleServiceProxy,
        noLaunchExampleServiceProxy
    ) {
        super(genericClient);
        this.exampleServiceProxy = exampleServiceProxy;
        this.noLaunchExampleServiceProxy = noLaunchExampleServiceProxy;
    }

    getExampleServiceProxy() {
        return this.exampleServiceProxy;
    }
    
    getNoLaunchExampleServiceProxy() {
        return this.noLaunchExampleServiceProxy;
    }

}

/**
 * Client invocation handler for ExampleService, to be implemented by Client
 *
 */
export class ExampleServiceInvocationHandler {

    onPointToPoint(invocationContext, request) {
        // TODO implement handler
    }
    onServerStreaming(invocationContext, request, hostClient) {
        // TODO implement handler
    }
    onClientToServer(invocationContext, hostClient) {
        // TODO implement handler
    }
    onBidiStreaming(invocationContext, hostClient) {
        // TODO implement handler
    }
}

/**
 * Internal invocation handler delegate for ExampleService
 *
 */
class ExampleServiceInvocationHandlerInternal {

    constructor(clientHandler) {
        this.clientHandler = clientHandler;
    }

    onPointToPoint(invocationContext, request) {
        const responseToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Response.encode(from).finish());
        const requestFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Request.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Request.toObject(decoded);
        };
        return this.clientHandler
            .onPointToPoint(invocationContext, requestFromBinaryConverter(request))
            .then(response => responseToBinaryConverter(response));
    }
    
    onServerStreaming(invocationContext, request, hostClient) {
        const responseToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Response.encode(from).finish());
        const requestFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Request.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Request.toObject(decoded);
        };
        this.clientHandler
            .onServerStreaming(invocationContext, requestFromBinaryConverter(request), {
                next: (response) => hostClient.next(responseToBinaryConverter(response)),
                complete: hostClient.complete.bind(hostClient),
                error: hostClient.error.bind(hostClient),
                cancel: hostClient.cancel.bind(hostClient)
            });
    }
    
    onClientToServer(invocationContext, hostClient) {
        const responseToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Response.encode(from).finish());
        const requestFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Request.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Request.toObject(decoded);
        };
        const baseObserver = this.clientHandler
            .onClientToServer(invocationContext, {
                next: (response) => hostClient.next(responseToBinaryConverter(response)),
                complete: hostClient.complete.bind(hostClient),
                error: hostClient.error.bind(hostClient),
                cancel: hostClient.cancel.bind(hostClient)
            });
        return {
            next: (value) => baseObserver.next(requestFromBinaryConverter(value)),
            complete: baseObserver.complete.bind(baseObserver),
            error: baseObserver.error.bind(baseObserver),
            streamCompleted: baseObserver.streamCompleted.bind(baseObserver)
        };
    }
    
    onBidiStreaming(invocationContext, hostClient) {
        const responseToBinaryConverter = from => Arrays.toArrayBuffer(plexus.com.db.plexus.interop.dsl.gen.test.model.Response.encode(from).finish());
        const requestFromBinaryConverter = from => {
            const decoded = plexus.com.db.plexus.interop.dsl.gen.test.model.Request.decode(new Uint8Array(from));
            return plexus.com.db.plexus.interop.dsl.gen.test.model.Request.toObject(decoded);
        };
        const baseObserver = this.clientHandler
            .onBidiStreaming(invocationContext, {
                next: (response) => hostClient.next(responseToBinaryConverter(response)),
                complete: hostClient.complete.bind(hostClient),
                error: hostClient.error.bind(hostClient),
                cancel: hostClient.cancel.bind(hostClient)
            });
        return {
            next: (value) => baseObserver.next(requestFromBinaryConverter(value)),
            complete: baseObserver.complete.bind(baseObserver),
            error: baseObserver.error.bind(baseObserver),
            streamCompleted: baseObserver.streamCompleted.bind(baseObserver)
        };
    }
}

/**
 * Client API builder
 *
 */
export class ComponentAClientBuilder {

    withClientDetails(clientId) {
        this.clientDetails = clientId;
        return this;
    }

    withAppInstanceId(appInstanceId) {
        this.clientDetails = this.clientDetails || {};
        this.clientDetails.applicationInstanceId = appInstanceId;
        return this;
    }

    withAppId(appId) {
        this.clientDetails = this.clientDetails || {};
        this.clientDetails.applicationId = appId;
        return this;
    }

    withExampleServiceInvocationsHandler(invocationsHandler) {
        this.exampleServiceHandler = new ExampleServiceInvocationHandlerInternal(invocationsHandler);
        return this;
    }

    withTransportConnectionProvider(provider) {
        this.transportConnectionProvider = provider;
        return this;
    }

    connect() {
        return new ContainerAwareClientAPIBuilder()
            .withTransportConnectionProvider(this.transportConnectionProvider)
            .withClientDetails(this.clientDetails)
            .withUnaryInvocationHandler({
                serviceInfo: {
                    serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
                },
                handler: {
                    methodId: "PointToPoint",
                    handle: this.exampleServiceHandler.onPointToPoint.bind(this.exampleServiceHandler)
                }
            })
            .withServerStreamingInvocationHandler({
                serviceInfo: {
                    serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
                },
                handler: {
                    methodId: "ServerStreaming",
                    handle: this.exampleServiceHandler.onServerStreaming.bind(this.exampleServiceHandler)
                }
            })
            .withBidiStreamingInvocationHandler({
                serviceInfo: {
                    serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
                },
                handler: {
                    methodId: "ClientToServer",
                    handle: this.exampleServiceHandler.onClientToServer.bind(this.exampleServiceHandler)
                }
            })
            .withBidiStreamingInvocationHandler({
                serviceInfo: {
                    serviceId: "com.db.plexus.interop.dsl.gen.test.services.ExampleService"
                },
                handler: {
                    methodId: "BidiStreaming",
                    handle: this.exampleServiceHandler.onBidiStreaming.bind(this.exampleServiceHandler)
                }
            })
            .connect()
            .then(genericClient => new ComponentAClientImpl(
                genericClient,
                new ExampleServiceProxyImpl(genericClient),
                                new NoLaunchExampleServiceProxyImpl(genericClient)
                ));
    }
}
